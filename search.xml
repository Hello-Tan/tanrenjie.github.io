<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[巧用padding/margin实现空间占位]]></title>
    <url>%2F2017%2F07%2F14%2F%E5%B7%A7%E7%94%A8padding-margin%E5%AE%9E%E7%8E%B0%E7%A9%BA%E9%97%B4%E5%8D%A0%E4%BD%8D%2F</url>
    <content type="text"><![CDATA[近期在开发移动端项目遇到一个问题，当网页加载时页面会有闪烁效果，原因是因为图片容器没有定宽高，所以在加载图片时始终有一个短暂的闪烁效果，那么如何解决这个问题？ 一个基础却又容易混淆的css知识点： 当margin/padding取形式为百分比的值时，无论是left/right，还是top/bottom，都是以父元素的width为参照物的！ 也许你会说，left/right以父元素的width为参照物好理解，但是top/bottom为什么也是以父元素的width为参照物的呢？网上众说纷纭，关键还是看W3C的规范： Note that in a horizontal flow, percentages on ‘margin-top’ and ‘margin-bottom’ are relative to the width of the containing block, not the height (and in vertical flow, ‘margin-left’ and ‘margin-right’ are relative to the height, not the width). Note that percentages on ‘padding-top’ and ‘padding-bottom’ are relative to the width of the containing block, not the height (at least in a horizontal flow; in a vertical flow they are relative to the height). 那根据这个特性，想让图片的高度与屏幕宽度相等，则可以用：margin-top：100% 或padding-top：100% 来让容器预先占位，完美解决图片加载闪烁bug,而且可以通过修改百分比值来达到修改图片宽高比显示。 那这就完了吗？ 并没有，此方案的缺陷是无法给容器设置max-height属性，因为容器的高度是通过padding撑起来，而实际高度为0，所以max-height无效。 那想要优化这一点，唯一的方法就是利用内容高度来撑开而非padding，这个方案跟消除浮动所用的方案非常相似：给容器添加一个子元素/伪元素，并把子元素/伪元素的margin-top / padding-top设为100%，使其实际高度相当于容器的宽度，如此一来，便能把容器的高度撑至与宽度一致了。由于添加子元素与HTML语义化相悖，因此更推荐使用伪元素(:after)来实现此方案。 那如果占位不是图片，而且有子元素在内部怎么办？ 答案很简单，那就是利用position: absolute;]]></content>
  </entry>
  <entry>
    <title><![CDATA[浅谈选择器]]></title>
    <url>%2F2017%2F07%2F10%2F%E6%B5%85%E8%B0%88%E9%80%89%E6%8B%A9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[众所周知，JavaScript 主要由三部分组成，分别是 Ecmascript，DOM，BOM。 其中 DOM 是网页交互的核心，也是浏览器性能杀手。今天我们就来探讨DOM中的选择器。 getElementById ：返回文档中对拥有指定 ID 的第一个元素的引用，该选择器只能在 document 对象下获取，不能在其它 HTML 对象下获取； getElementsByName ：返回文档中带有指定名称的元素动态集合； getElementsByTagName ：返回文档中带有指定标签名的元素动态集合； getElementsByClassName ：返回文档中带有指定标签名的元素动态集合（IE9以上）； querySelector ：返回文档中匹配指定 CSS 选择器的一个元素（IE8以上）； querySelectorAll ：HTML5中引入的新方法，返回文档中匹配的CSS选择器的所有元素静态集合； document.links ：返回文档中所有 a 标签和 area 标签的动态集合 document.images ：返回文档中所有 img 标签的动态集合 document.scripts ：返回文档中所有 script 标签的动态集合 细心的童鞋已经注意到这里的介绍多了 “静态集合“ 和 ”动态集合“ ，其实我们用 DOM 查找到的元素集合是有动态和静态区别的，动态的指的是集合始终与文档相关联，每当对应元素增删的时候，集合也会发生变化，而静态则类似元素集合的快照，当对应元素增删时，集合不会发生变化。 ”querySelector“，”querySelectorAll“这两兄弟虽然我平常用的不多，但功能却是十分强大，这是 JQ/CSS 选择器的原生实现版， 其缺点就是只支持新版本浏览器，而且相对于其它的选择器查找效率要低一点。 DOM 选择器的浅谈就到此为止了， CSS3 也更新了很多强大的选择器，在浏览器支持的情况下，我们是时候将其用于实际开发中去了。]]></content>
      <categories>
        <category>JavaScript秘密花园</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>选择器</tag>
      </tags>
  </entry>
</search>